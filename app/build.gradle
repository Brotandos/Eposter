apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Need for read api key from local.properties
def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (!propsFile.exists()) return print(filename + " doesn't exist")
    def props = new Properties()
    props.load(new FileInputStream(propsFile))
    if (props[propName] == null) return print("No such property " + propName + " in file " + filename)
    return props[propName]
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"
    defaultConfig {
        applicationId "com.brotandos.eposter"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "TMDB_API_KEY", "\"${getProperty("local.properties", "tmdb_api_key")}\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

ext {
    androidx_version = '1.0.2'
    anko_version = '0.10.8'
    koin_version = '1.0.2'
    retrofit_version = '2.3.0'
    okhttp_version = '3.11.0'
    gson_version = '2.8.2'
    timber_version = '4.7.1'
    stetho_version = '1.5.0'
    glide_version = '4.9.0'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // androidx
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation "androidx.core:core-ktx:$androidx_version"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"

    // alert
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    // rx
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // network
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.google.code.gson:gson:$retrofit_version"
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    // glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // debugging
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    // dependency injection
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-scope:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
}

/**
 * Need for parcelize models
 * @see [https://proandroiddev.com/parcelable-in-kotlin-here-comes-parcelize-b998d5a5fcac]
 */
androidExtensions {
    experimental = true
}